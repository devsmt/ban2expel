#! /usr/bin/env php
<?php
require_once 'common.php';
require_once 'config.php';

/*
extract from F2ban logs the banned I
use whois query to determine the range of provider IP
ban the subnet printing range ip in hosts.deny format
*/

/* @see config.php
// abstraction representing the configuration of this instance
class Config {
    // countries that will be banned
    public static function getBannedCountries(){
        return ['CN','VN','KR','IN','HK','TH','TW','SC','NP'];
    }
    // first 3 digits of IP classes that will be skipped
    public static function getIPWhiteList() {
        return [
        "91.",
        "188",
        "37.",
        "93.",
        ];
    }
}*/

// parsa il log e trova gli ip banned
function parse_log($file_cont) {
    if( empty($file_cont) ) {
        return ;
    }
    $a_lines = explode( "\n", $file_cont);
    foreach($a_lines as $line){
        // 2014-03-28 01:56:31,793 fail2ban.actions: WARNING [ssh] Ban 212.83.175.89
        $m = preg_match('/Ban ([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})/', $line, $matches, PREG_OFFSET_CAPTURE);

        if( 0 !== $m ) {

            $ip = implode('.', [
                $matches[1][0],
                $matches[2][0],
                $matches[3][0],
                $matches[4][0]
                ] );

            //echo "$line \n";
            // echo sprintf( "# %s %s \n", $ip, get_country($ip) );
            IPList::add($ip);
        }
    }
}

// save and read data, will last in cache 1 gg
class MFCache {
    public static function fetch($cache_key) {
        $path = self::getFileName($cache_key);
        if( !file_exists($path) ) {
            return false;
        }
        return unserialize( file_get_contents($path) );
    }
    public static function store($cache_key, $val, $ttl_secs=3600 ) {
        $path = self::getFileName($cache_key);
        file_put_contents($path, serialize($val) );
    }
    public static $cache_dir = dirname( realpath(__FILE__) );
    public static $cache_date_fmt = 'Ymd';
    // ottiene il filename.  la cache dura tutta la giornata
    public static function getFileName($cache_key) {
        $f = sprintf('%s/cache/%s_%s.txt', self::$cache_dir, $cache_key , date(self::$cache_date_fmt) );
        return $f;
    }
    // eliminare i file più vecchi di 1 giorno
    public static function cleanup() {
        $files = glob(self::$cache_dir."/cache/*");
        $time  = time();
        $s_day = 60*60*24;
        foreach ($files as $file){
            if (is_file($file)){
                if ($time - filemtime($file) >= $s_day*2) {// 2 days
                    unlink($file);
                }
            }
        }
    }
}

// abstraction on cache engines available
class Cache {
    public static function exists($k){ return apc_exists($k); }
    public static function fetch($k){ return apc_fetch($k); }
    public static function store($k, $str, $ttl){ return apc_add( $ip, $str, $ttl); }
}


class Whois {
    // cached whois
    public static function get_whois($ip) {
        if( Cache::exists($ip) ) {
            echo "# whois from cache ".time()."\n";
            return Cache::fetch($ip);
        } else {
            $str = `whois $ip`;
            Cache::add( $ip, $str, $ttl=60*60*2 );
            return $str;
        }
    }

    public static function get_country($ip) {
        $str = self::get_whois($ip);
        $a_lines = explode( "\n", $str);
        foreach($a_lines as $line  ){
            //"country:        TR"
            if( strpos($line, 'country:') !== false ) {
                $s = str_replace('country:','',$line);
                $s = trim($s);
                return $s;
            }
        }
        return '';
    }

    public static function get_inetnum($ip) {
        $str = self::get_whois($ip);
        $a_lines = explode( "\n", $str);
        foreach($a_lines as $line  ){
            // "inetnum:        85.25.203.255 - 85.25.203.255"
            if( strpos($line, 'inetnum:') !== false ) {
                $s = str_replace('inetnum:','',$line);
                $s = trim($s);
                return $s;
            }
        }
        return '';
    }
}

class TCPWrappers {
    public static function count_deny($ip){
        // non prendo tutto l'ip, ma solo la prima parte
        // non uso cache perchè il file varia mentre sto analizzando il log
        $a=explode( '.', $ip);
        $part_ip = implode('.', [$a[0],$a[1]] );
        $cmd = "grep $part_ip /etc/hosts.deny | wc -l";
        // echo "$cmd \n";
        $count = `$cmd`;
        return trim($count);
    }

    public static function getDenyCount($ip){
        // non prendo tutto l'ip, ma solo la prima parte
        // non uso cache perchè il file varia mentre sto analizzando il log
        $a=explode( '.', $ip);
        $part_ip = implode('.', [$a[0],$a[1]] );
        $cmd = "grep 'ALL: $part_ip' /etc/hosts.deny ";
        // echo "$cmd \n";
        $count = `$cmd`;
        return trim($count);
    }
    // 202.109.128.0 - 202.109.191.255
    public static function getFormattedFromInetNum($inetnum) {
        if( empty($inetnum) ) {
            return '';
        }
        $a_ip = explode('-',trim($inetnum));
        $s = '';
        foreach(self::rangeFromIP($a_ip[0], $a_ip[1]) as $i=>$ip ){
            $s .= sprintf("ALL: %s \n", trim($ip) );
        }
        return $s;
    }

    // dati due ip 202.109.128.0, 202.109.191.255, sviluppa un range
    public static function rangeFromIP($ip_1, $ip_2) {
        $a_ip_1 = explode('.', $ip_1);
        $a_ip_2 = explode('.', $ip_2);

        $i_ip_1 = ip2long($ip_1);
        $i_ip_2 = ip2long($ip_2);
        // @see long2ip

        //return [$ip_1, $ip_2];
        $a = [];
        for( $i=$a_ip_1[2]; $i <= $a_ip_2[2]; $i++){
            $a[]="{$a_ip_1[0]}.{$a_ip_1[1]}.$i.";
        }
        return $a;
    }

}


// raccoglie gli ip e recupera info
class IPList {
    static $list=[];
    public static function getAll(){
        ksort(self::$list);
        return self::$list;
    }
    public static function add($ip){

        if( array_key_exists($ip, self::$list ) ){
            self::$list[ $ip ][ 'ban_count' ]++;
        } else {
            self::$list[ $ip ] = [
                'ban_count' => 1,
                'country'   => whois::get_country($ip),
                'inetnum'   => whois::get_inetnum($ip),
                'tcpwrap_denied' => TCPWrappers::count_deny($ip)
            ];
        }
    }
}
if(!function_exists('apc_exists')) {
    function apc_exists($keys) {
        $result = false;
        $v = apc_fetch($keys, $result);
        return $result;
    }
}
function is_in_whitelist($ip){
    $a_whitelist = Config::getIPWhiteList();
    $ip_beg = substr($ip,0,3);
    return in_array($ip_beg,$a_whitelist);
}




//-----------------------------------------------------------------------------------
//  actions
//-----------------------------------------------------------------------------------

//
function action_main($only_missing=false) {
    // parsa il log e trova gli ip banned
    foreach( ['/var/log/fail2ban.log','/var/log/fail2ban.log.1'] as $logfile){
        $file_cont = file_get_contents($logfile);
        parse_log($file_cont);
    }

    // stampa lista ip e info
    $a_banned = IPList::getAll();
    foreach($a_banned as $ip => $a_ip_info){
        $padded_ip = str_pad($ip, 16, ' ', STR_PAD_RIGHT);
        $padded_count = str_pad($a_ip_info['ban_count'], 3, ' ', STR_PAD_RIGHT);


        $deny_lines = TCPWrappers::getDenyCount($ip);
        // due possibili aoutput, aoutput esteso per controllo manuale o solo ip da aggiungere al hosts.deny
        if( !$only_missing ) {
            echo sprintf("#ip:%s country:%s bancount:%s tcpwrap_denied:%s inet:%s \n",
                $padded_ip,
                $a_ip_info['country'],
                $padded_count,
                $a_ip_info['tcpwrap_denied'],
                $a_ip_info['inetnum']
                );

            if( !empty($deny_lines) ) {
                echo "#in hosts.deny:\n";
                echo $deny_lines;
                echo "\n\n";
            } else {
                echo "# NOT in hosts.deny!\n";
                $a_banned_countries = Config::getBannedCountries();
                $country = strtoupper(trim($a_ip_info['country']));
                if( in_array($country, $a_banned_countries) ) {
                    echo TCPWrappers::getFormattedFromInetNum($a_ip_info['inetnum']);
                } else {
                    echo sprintf("# skipping non %s: %s \n", implode(',',$a_banned_countries), $a_ip_info['country']);
                }
            }
        } else {
            if( empty($deny_lines) ) {
                echo TCPWrappers::getFormattedFromInetNum($a_ip_info['inetnum']);
            }
        }
    }
}



function action_test() {
    //dati due ip 202.109.128.0, 202.109.191.255, sviluppa un range
    $ip_1 = '202.109.128.0';
    $ip_2 = '202.109.191.255';
    $a = TCPWrappers::rangeFromIP($ip_1, $ip_2);
    echo '<pre>',var_dump( $a ),'</pre>'; // DEBUG
    die(__FUNCTION__.__FILE__);
}


function action_usage($argv){
  return <<<__END__
uso:
    {$argv[0]} [test print main]
uso del programma
__END__;
}
//------------------------------------------------------------------------------
//  main
//------------------------------------------------------------------------------
if( PHP_SAPI !== 'cli'){
    die('cli script');
}

$action = isset($argv[1]) ? $argv[1] : 'main';

switch($action) {

    case 'test':
        action_test();
    break;

    case 'print':
        echo "# stampa IP da bannare \n";
        action_main(true);
    break;

    case 'main':
    default:
        //die(action_usage());
        action_main(false);
    break;
}



